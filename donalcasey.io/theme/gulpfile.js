'use strict';
const gulp = require('gulp');
const gulpLoadPlugins = require('gulp-load-plugins');
const browserSync = require('browser-sync').create();
const del = require('del');
const wiredep = require('wiredep').stream;
const run = require('run-sequence');
const browserify = require('gulp-browserify');
const fileinclude = require('gulp-file-include');
const minify = require('gulp-minify');
const cleanCSS = require('gulp-clean-css');

const $ = gulpLoadPlugins();
const reload = browserSync.reload;

var dev = false;

///////////////////////
//*
//* NOTE ON DIST VS SRC
//* I am moving away from having functions.php
//* be the src of which path we serve
//* always serve from dist and minify/other dist tasks
//* will be part of the build env. -DC
///////////////

gulp.task('runFileInclude', (callback) => {
  run(['fileinclude'], () => {
    callback();
  });
});

gulp.task('fileinclude', () => {
  gulp.src('templates/**/*.twig')
    .pipe(fileinclude({
      prefix: '@@',
      basepath: '@file'
    }))
    .pipe(gulp.dest('.tmp/templates'));
});

gulp.task('styles', () => {
  return gulp.src('./src/scss/main.scss')
    .pipe($.plumber())
    .pipe($.sourcemaps.init())
    .pipe($.sass.sync({
      outputStyle: 'expanded',
      precision: 10,
      includePaths: ['.']
    }).on('error', $.sass.logError))
    .pipe($.autoprefixer({browsers: ['> 1%', 'last 2 versions', 'Firefox ESR', 'iOS 7']}))
    .pipe($.sourcemaps.write('dist/styles/'))
    .pipe(gulp.dest('dist/styles/'))
    .pipe(reload({stream: true}));
});

gulp.task('scripts', () => {
      // Single entry point to browserify 
  gulp.src('src/js/main.js')
      .pipe(browserify({
        insertGlobals : true,
        debug : !gulp.env.production
      }))
      .pipe(gulp.dest('./dist/browserify/'));
      
  return gulp.src('src/js/**/*.js')
    .pipe($.plumber())
    .pipe($.sourcemaps.init())
    .pipe($.babel())
    .pipe($.sourcemaps.write('.'))
    .pipe(gulp.dest('dist/scripts'))
    .pipe(reload({stream: true}));
});

gulp.task('compress', function() {
  gulp.src('./dist/browserify/*.js')
    .pipe(minify({
        ext:{
            src:'-debug.js',
            min:'.js'
        },
        exclude: ['tasks'],
        ignoreFiles: ['.combo.js', '-min.js']
    }))
    .pipe(gulp.dest('./dist/browserify/'))
});

gulp.task('minify-css', function() {
  return gulp.src('./dist/styles/main.css')
    .pipe(cleanCSS({ compatibility: '*' }))
    .pipe(gulp.dest('./dist/styles/'));
});

//take a stand airbnb
function lint(files, options) {
  return gulp.src(files)
    .pipe($.eslint({ fix: true }))
    .pipe(reload({stream: true, once: true}))
    .pipe($.eslint.format())
    .pipe($.if(!browserSync.active, $.eslint.failAfterError()));
}

gulp.task('lint', () => {
  return lint('src/js/**/*.js')
    .pipe(gulp.dest('src/js'));
});
//lint test not configured
gulp.task('lint:test', () => {
  return lint('test/spec/**/*.js')
    .pipe(gulp.dest('test/spec'));
});

gulp.task('html', ['runFileInclude', 'styles', 'scripts'], () => {
  return gulp.src('.tmp/**/*.twig')
    .pipe($.useref({searchPath: ['.tmp', 'src', '.']}))
    .pipe($.if('*.js', $.uglify()))
    .pipe($.if('*.css', $.cssnano({safe: true, autoprefixer: false})))
    .pipe($.if('*.twig', $.htmlmin({collapseWhitespace: true,includeAutoGeneratedTags:false})))
    .pipe(gulp.dest('dist'));
});

gulp.task('images', () => {
  return gulp.src('src/images/**/*')
    .pipe($.cache($.imagemin()))
    .pipe(gulp.dest('dist/images'));
});

gulp.task('fonts', () => {
  return lint('src/fonts/')
    .pipe(gulp.dest('dist/fonts'));
});

gulp.task('extras', () => {
  return gulp.src([
    'src/*',
    '!src/*.twig'
  ], {
    dot: true
  }).pipe(gulp.dest('dist'));
});

gulp.task('clean', del.bind(null, ['.tmp', 'dist']));

gulp.task('serve', () => {
  run(['clean', 'wiredep'], ['html', 'styles', 'scripts', 'images', 'fonts'], () => {
    // TODO: update the proxy URL below.
    browserSync.init({
      notify: false,
      proxy: 'http://theme.lndo.site/',
      files: [
        '**/*.css',
        '**/*.js',
    ]
    });

    gulp.watch([
      'src/images/**/*',
      'dist/styles/**/*',
      'dist/fonts/**/*'
    ]).on('change', reload);
    
    // gulp.watch('templates/**/*.twig', ['runFileInclude', 'html']);
    gulp.watch('src/scss/**/*.scss', ['styles']);
    // gulp.watch('src/images/**/*'); // further define how this runs and when? cache? server only?
    gulp.watch('src/js/**/*.js', ['scripts']);
    // gulp.watch('src/fonts/**/*', ['fonts']);
    // gulp.watch('bower.json', ['wiredep', 'fonts']);
  });
});

// inject bower components
gulp.task('wiredep', () => {
  gulp.src('app/styles/*.scss')
    .pipe($.filter(file => file.stat && file.stat.size))
    .pipe(wiredep({
      ignorePath: /^(\.\.\/)+/
    }))
    .pipe(gulp.dest('src/styles'));

  gulp.src('src/*.html')
    .pipe(wiredep({
      ignorePath: /^(\.\.\/)*\.\./
    }))
    .pipe(gulp.dest('./'));
});

gulp.task('build', ['html', 'images', 'fonts'], () => {
  return gulp.src('dist/**/*').pipe($.size({title: 'build', gzip: true}));
});

gulp.task('production', ['compress', 'minify-css'])


gulp.task('default', () => {
  return new Promise(resolve => {
    dev = true;
    run(['clean', 'wiredep'], 'build', resolve);
  });
});